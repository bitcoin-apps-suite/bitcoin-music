"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/audio/AudioEngine.ts":
/*!**********************************!*\
  !*** ./lib/audio/AudioEngine.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* __next_internal_client_entry_do_not_use__ default auto */ class AudioEngine {\n    static getInstance() {\n        if (!AudioEngine.instance) {\n            AudioEngine.instance = new AudioEngine();\n        }\n        return AudioEngine.instance;\n    }\n    async initialize() {\n        if (this.initialized) return;\n        try {\n            console.log(\"Simplified audio engine initialized\");\n            this.initialized = true;\n        } catch (error) {\n            console.error(\"Failed to initialize audio:\", error);\n        }\n    }\n    // Transport Controls\n    async play() {\n        await this.initialize();\n        this.isCurrentlyPlaying = true;\n        console.log(\"Audio engine: play started\");\n        return true;\n    }\n    pause() {\n        this.isCurrentlyPlaying = false;\n        console.log(\"Audio engine: paused\");\n    }\n    stop() {\n        this.isCurrentlyPlaying = false;\n        this.currentPosition = \"0:0:0\";\n        console.log(\"Audio engine: stopped\");\n    }\n    async startRecording() {\n        await this.initialize();\n        this.isCurrentlyRecording = true;\n        console.log(\"Audio engine: recording started\");\n        this.play();\n    }\n    async stopRecording() {\n        this.isCurrentlyRecording = false;\n        console.log(\"Audio engine: recording stopped\");\n        this.stop();\n        return null;\n    }\n    // Track Management\n    createTrack(name) {\n        let type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"audio\";\n        const id = \"track_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n        const track = {\n            id,\n            name,\n            volume: 0,\n            muted: false,\n            solo: false,\n            instrument: null,\n            effects: [],\n            channel: null\n        };\n        this.tracks.set(id, track);\n        console.log(\"Audio engine: created \".concat(type, ' track \"').concat(name, '\" with id ').concat(id));\n        return id;\n    }\n    getTrack(id) {\n        return this.tracks.get(id);\n    }\n    getAllTracks() {\n        return Array.from(this.tracks.values());\n    }\n    deleteTrack(id) {\n        const track = this.tracks.get(id);\n        if (track) {\n            var _track_instrument;\n            (_track_instrument = track.instrument) === null || _track_instrument === void 0 ? void 0 : _track_instrument.dispose();\n            track.channel.dispose();\n            track.effects.forEach((effect)=>effect.dispose());\n            this.tracks.delete(id);\n        }\n    }\n    // Track Controls\n    setTrackVolume(trackId, volume) {\n        const track = this.tracks.get(trackId);\n        if (track) {\n            track.volume = volume;\n            track.channel.volume.value = volume;\n        }\n    }\n    setTrackMute(trackId, muted) {\n        const track = this.tracks.get(trackId);\n        if (track) {\n            track.muted = muted;\n            track.channel.mute = muted;\n        }\n    }\n    setTrackSolo(trackId, solo) {\n        const track = this.tracks.get(trackId);\n        if (track) {\n            track.solo = solo;\n            // Implement solo logic - mute other tracks when one is soloed\n            const hasSoloTracks = Array.from(this.tracks.values()).some((t)=>t.solo);\n            this.tracks.forEach((t)=>{\n                if (hasSoloTracks) {\n                    t.channel.mute = !t.solo;\n                } else {\n                    t.channel.mute = t.muted;\n                }\n            });\n        }\n    }\n    // Audio Loading\n    async loadAudioToTrack(trackId, audioUrl) {\n        const track = this.tracks.get(trackId);\n        if (track && track.instrument instanceof Player) {\n            await track.instrument.load(audioUrl);\n        }\n    }\n    // MIDI Playback\n    playNote(trackId, note) {\n        let duration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"8n\", time = arguments.length > 3 ? arguments[3] : void 0;\n        const track = this.tracks.get(trackId);\n        if (track && track.instrument) {\n            if (track.instrument instanceof PolySynth) {\n                track.instrument.triggerAttackRelease(note, duration, time);\n            } else if (track.instrument instanceof MembraneSynth) {\n                track.instrument.triggerAttackRelease(note, duration, time);\n            }\n        }\n    }\n    // Effects\n    addEffect(trackId, effectType) {\n        var // Insert effect before the channel\n        _track_instrument, _track_instrument1;\n        const track = this.tracks.get(trackId);\n        if (!track) return;\n        let effect;\n        switch(effectType){\n            case \"reverb\":\n                effect = new Reverb(2);\n                break;\n            case \"delay\":\n                effect = new FeedbackDelay(\"8n\", 0.3);\n                break;\n            case \"distortion\":\n                effect = new Distortion(0.8);\n                break;\n            case \"filter\":\n                effect = new Filter(1000, \"lowpass\");\n                break;\n            default:\n                return;\n        }\n        (_track_instrument = track.instrument) === null || _track_instrument === void 0 ? void 0 : _track_instrument.disconnect();\n        (_track_instrument1 = track.instrument) === null || _track_instrument1 === void 0 ? void 0 : _track_instrument1.chain(effect, track.channel);\n        track.effects.push(effect);\n    }\n    // Transport Control\n    setBPM(bpm) {\n        if (this.initialized && Transport) {\n            Transport.bpm.value = bpm;\n        }\n    }\n    getBPM() {\n        if (this.initialized && Transport) {\n            return Transport.bpm.value;\n        }\n        return 120;\n    }\n    getPosition() {\n        if (this.initialized && Transport) {\n            return Transport.position.toString();\n        }\n        return \"0:0:0\";\n    }\n    setPosition(position) {\n        if (this.initialized && Transport) {\n            Transport.position = position;\n        }\n    }\n    // Loop Control\n    setLoop(start, end) {\n        if (this.initialized && Transport) {\n            Transport.setLoopPoints(start, end);\n            Transport.loop = true;\n        }\n    }\n    disableLoop() {\n        if (this.initialized && Transport) {\n            Transport.loop = false;\n        }\n    }\n    // Metronome\n    toggleMetronome(enabled) {\n        if (!this.metronome || !this.initialized || !Transport) return;\n        if (enabled) {\n            // Schedule metronome clicks on every beat\n            Transport.scheduleRepeat((time)=>{\n                var _this_metronome;\n                (_this_metronome = this.metronome) === null || _this_metronome === void 0 ? void 0 : _this_metronome.start(time);\n            }, \"4n\");\n        } else {\n            Transport.cancel();\n        }\n    }\n    // State\n    getState() {\n        var _Transport, _this_recorder;\n        return {\n            isPlaying: this.initialized && ((_Transport = Transport) === null || _Transport === void 0 ? void 0 : _Transport.state) === \"started\",\n            isRecording: ((_this_recorder = this.recorder) === null || _this_recorder === void 0 ? void 0 : _this_recorder.state) === \"started\" || false,\n            bpm: this.initialized ? this.getBPM() : 120,\n            position: this.initialized ? this.getPosition() : \"0:0:0\",\n            tracks: this.getAllTracks()\n        };\n    }\n    // Cleanup\n    dispose() {\n        var _this_recorder, _this_metronome;\n        this.tracks.forEach((track)=>{\n            var _track_instrument;\n            (_track_instrument = track.instrument) === null || _track_instrument === void 0 ? void 0 : _track_instrument.dispose();\n            track.channel.dispose();\n            track.effects.forEach((effect)=>effect.dispose());\n        });\n        this.tracks.clear();\n        (_this_recorder = this.recorder) === null || _this_recorder === void 0 ? void 0 : _this_recorder.dispose();\n        (_this_metronome = this.metronome) === null || _this_metronome === void 0 ? void 0 : _this_metronome.dispose();\n    }\n    constructor(){\n        this.initialized = false;\n        this.tracks = new Map();\n        this.mainOut = null;\n        this.recorder = null;\n        this.metronome = null;\n        this.isCurrentlyPlaying = false;\n        this.isCurrentlyRecording = false;\n        this.currentBPM = 120;\n        this.currentPosition = \"0:0:0\";\n    // Simplified constructor without Tone.js\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (AudioEngine);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9hdWRpby9BdWRpb0VuZ2luZS50cyIsIm1hcHBpbmdzIjoiOzZEQXdCQSxNQUFNQTtJQWdCSixPQUFPQyxjQUEyQjtRQUNoQyxJQUFJLENBQUNELFlBQVlFLFFBQVEsRUFBRTtZQUN6QkYsWUFBWUUsUUFBUSxHQUFHLElBQUlGO1FBQzdCO1FBQ0EsT0FBT0EsWUFBWUUsUUFBUTtJQUM3QjtJQUVBLE1BQU1DLGFBQWE7UUFDakIsSUFBSSxJQUFJLENBQUNDLFdBQVcsRUFBRTtRQUV0QixJQUFJO1lBQ0ZDLFFBQVFDLEdBQUcsQ0FBQztZQUNaLElBQUksQ0FBQ0YsV0FBVyxHQUFHO1FBQ3JCLEVBQUUsT0FBT0csT0FBTztZQUNkRixRQUFRRSxLQUFLLENBQUMsK0JBQStCQTtRQUMvQztJQUNGO0lBRUEscUJBQXFCO0lBQ3JCLE1BQU1DLE9BQU87UUFDWCxNQUFNLElBQUksQ0FBQ0wsVUFBVTtRQUNyQixJQUFJLENBQUNNLGtCQUFrQixHQUFHO1FBQzFCSixRQUFRQyxHQUFHLENBQUM7UUFDWixPQUFPO0lBQ1Q7SUFFQUksUUFBUTtRQUNOLElBQUksQ0FBQ0Qsa0JBQWtCLEdBQUc7UUFDMUJKLFFBQVFDLEdBQUcsQ0FBQztJQUNkO0lBRUFLLE9BQU87UUFDTCxJQUFJLENBQUNGLGtCQUFrQixHQUFHO1FBQzFCLElBQUksQ0FBQ0csZUFBZSxHQUFHO1FBQ3ZCUCxRQUFRQyxHQUFHLENBQUM7SUFDZDtJQUVBLE1BQU1PLGlCQUFpQjtRQUNyQixNQUFNLElBQUksQ0FBQ1YsVUFBVTtRQUNyQixJQUFJLENBQUNXLG9CQUFvQixHQUFHO1FBQzVCVCxRQUFRQyxHQUFHLENBQUM7UUFDWixJQUFJLENBQUNFLElBQUk7SUFDWDtJQUVBLE1BQU1PLGdCQUFzQztRQUMxQyxJQUFJLENBQUNELG9CQUFvQixHQUFHO1FBQzVCVCxRQUFRQyxHQUFHLENBQUM7UUFDWixJQUFJLENBQUNLLElBQUk7UUFDVCxPQUFPO0lBQ1Q7SUFFQSxtQkFB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QWE7YUFDYjFGLGtCQUFrQjtJQUd4Qix5Q0FBeUM7SUFDM0M7QUE0UEY7QUFFQSwrREFBZVosV0FBV0EsRUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvYXVkaW8vQXVkaW9FbmdpbmUudHM/ZWE4YyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuLy8gU2ltcGxpZmllZCBhdWRpbyBlbmdpbmUgd2l0aG91dCBUb25lLmpzIGZvciBub3dcbi8vIFRoaXMgd2lsbCBhbGxvdyB0aGUgYXBwIHRvIHJ1biB3aXRob3V0IGF1ZGlvIGltcG9ydCBlcnJvcnNcblxuZXhwb3J0IGludGVyZmFjZSBUcmFjayB7XG4gIGlkOiBzdHJpbmdcbiAgbmFtZTogc3RyaW5nXG4gIHZvbHVtZTogbnVtYmVyXG4gIG11dGVkOiBib29sZWFuXG4gIHNvbG86IGJvb2xlYW5cbiAgaW5zdHJ1bWVudDogYW55IHwgbnVsbFxuICBlZmZlY3RzOiBhbnlbXVxuICBjaGFubmVsOiBhbnlcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBdWRpb0VuZ2luZVN0YXRlIHtcbiAgaXNQbGF5aW5nOiBib29sZWFuXG4gIGlzUmVjb3JkaW5nOiBib29sZWFuXG4gIGJwbTogbnVtYmVyXG4gIHBvc2l0aW9uOiBzdHJpbmdcbiAgdHJhY2tzOiBUcmFja1tdXG59XG5cbmNsYXNzIEF1ZGlvRW5naW5lIHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEF1ZGlvRW5naW5lXG4gIHByaXZhdGUgaW5pdGlhbGl6ZWQgPSBmYWxzZVxuICBwcml2YXRlIHRyYWNrczogTWFwPHN0cmluZywgVHJhY2s+ID0gbmV3IE1hcCgpXG4gIHByaXZhdGUgbWFpbk91dDogYW55ID0gbnVsbFxuICBwcml2YXRlIHJlY29yZGVyOiBhbnkgPSBudWxsXG4gIHByaXZhdGUgbWV0cm9ub21lOiBhbnkgPSBudWxsXG4gIHByaXZhdGUgaXNDdXJyZW50bHlQbGF5aW5nID0gZmFsc2VcbiAgcHJpdmF0ZSBpc0N1cnJlbnRseVJlY29yZGluZyA9IGZhbHNlXG4gIHByaXZhdGUgY3VycmVudEJQTSA9IDEyMFxuICBwcml2YXRlIGN1cnJlbnRQb3NpdGlvbiA9ICcwOjA6MCdcbiAgXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIFNpbXBsaWZpZWQgY29uc3RydWN0b3Igd2l0aG91dCBUb25lLmpzXG4gIH1cblxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogQXVkaW9FbmdpbmUge1xuICAgIGlmICghQXVkaW9FbmdpbmUuaW5zdGFuY2UpIHtcbiAgICAgIEF1ZGlvRW5naW5lLmluc3RhbmNlID0gbmV3IEF1ZGlvRW5naW5lKClcbiAgICB9XG4gICAgcmV0dXJuIEF1ZGlvRW5naW5lLmluc3RhbmNlXG4gIH1cblxuICBhc3luYyBpbml0aWFsaXplKCkge1xuICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSByZXR1cm5cblxuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygnU2ltcGxpZmllZCBhdWRpbyBlbmdpbmUgaW5pdGlhbGl6ZWQnKVxuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWVcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGluaXRpYWxpemUgYXVkaW86JywgZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgLy8gVHJhbnNwb3J0IENvbnRyb2xzXG4gIGFzeW5jIHBsYXkoKSB7XG4gICAgYXdhaXQgdGhpcy5pbml0aWFsaXplKClcbiAgICB0aGlzLmlzQ3VycmVudGx5UGxheWluZyA9IHRydWVcbiAgICBjb25zb2xlLmxvZygnQXVkaW8gZW5naW5lOiBwbGF5IHN0YXJ0ZWQnKVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBwYXVzZSgpIHtcbiAgICB0aGlzLmlzQ3VycmVudGx5UGxheWluZyA9IGZhbHNlXG4gICAgY29uc29sZS5sb2coJ0F1ZGlvIGVuZ2luZTogcGF1c2VkJylcbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgdGhpcy5pc0N1cnJlbnRseVBsYXlpbmcgPSBmYWxzZVxuICAgIHRoaXMuY3VycmVudFBvc2l0aW9uID0gJzA6MDowJ1xuICAgIGNvbnNvbGUubG9nKCdBdWRpbyBlbmdpbmU6IHN0b3BwZWQnKVxuICB9XG5cbiAgYXN5bmMgc3RhcnRSZWNvcmRpbmcoKSB7XG4gICAgYXdhaXQgdGhpcy5pbml0aWFsaXplKClcbiAgICB0aGlzLmlzQ3VycmVudGx5UmVjb3JkaW5nID0gdHJ1ZVxuICAgIGNvbnNvbGUubG9nKCdBdWRpbyBlbmdpbmU6IHJlY29yZGluZyBzdGFydGVkJylcbiAgICB0aGlzLnBsYXkoKVxuICB9XG5cbiAgYXN5bmMgc3RvcFJlY29yZGluZygpOiBQcm9taXNlPEJsb2IgfCBudWxsPiB7XG4gICAgdGhpcy5pc0N1cnJlbnRseVJlY29yZGluZyA9IGZhbHNlXG4gICAgY29uc29sZS5sb2coJ0F1ZGlvIGVuZ2luZTogcmVjb3JkaW5nIHN0b3BwZWQnKVxuICAgIHRoaXMuc3RvcCgpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8vIFRyYWNrIE1hbmFnZW1lbnRcbiAgY3JlYXRlVHJhY2sobmFtZTogc3RyaW5nLCB0eXBlOiAnYXVkaW8nIHwgJ21pZGknIHwgJ2RydW0nID0gJ2F1ZGlvJyk6IHN0cmluZyB7XG4gICAgY29uc3QgaWQgPSBgdHJhY2tfJHtEYXRlLm5vdygpfV8ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gXG5cbiAgICBjb25zdCB0cmFjazogVHJhY2sgPSB7XG4gICAgICBpZCxcbiAgICAgIG5hbWUsXG4gICAgICB2b2x1bWU6IDAsIC8vIDAgZEJcbiAgICAgIG11dGVkOiBmYWxzZSxcbiAgICAgIHNvbG86IGZhbHNlLFxuICAgICAgaW5zdHJ1bWVudDogbnVsbCxcbiAgICAgIGVmZmVjdHM6IFtdLFxuICAgICAgY2hhbm5lbDogbnVsbFxuICAgIH1cblxuICAgIHRoaXMudHJhY2tzLnNldChpZCwgdHJhY2spXG4gICAgY29uc29sZS5sb2coYEF1ZGlvIGVuZ2luZTogY3JlYXRlZCAke3R5cGV9IHRyYWNrIFwiJHtuYW1lfVwiIHdpdGggaWQgJHtpZH1gKVxuICAgIHJldHVybiBpZFxuICB9XG5cbiAgZ2V0VHJhY2soaWQ6IHN0cmluZyk6IFRyYWNrIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy50cmFja3MuZ2V0KGlkKVxuICB9XG5cbiAgZ2V0QWxsVHJhY2tzKCk6IFRyYWNrW10ge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMudHJhY2tzLnZhbHVlcygpKVxuICB9XG5cbiAgZGVsZXRlVHJhY2soaWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHRyYWNrID0gdGhpcy50cmFja3MuZ2V0KGlkKVxuICAgIGlmICh0cmFjaykge1xuICAgICAgdHJhY2suaW5zdHJ1bWVudD8uZGlzcG9zZSgpXG4gICAgICB0cmFjay5jaGFubmVsLmRpc3Bvc2UoKVxuICAgICAgdHJhY2suZWZmZWN0cy5mb3JFYWNoKGVmZmVjdCA9PiBlZmZlY3QuZGlzcG9zZSgpKVxuICAgICAgdGhpcy50cmFja3MuZGVsZXRlKGlkKVxuICAgIH1cbiAgfVxuXG4gIC8vIFRyYWNrIENvbnRyb2xzXG4gIHNldFRyYWNrVm9sdW1lKHRyYWNrSWQ6IHN0cmluZywgdm9sdW1lOiBudW1iZXIpIHtcbiAgICBjb25zdCB0cmFjayA9IHRoaXMudHJhY2tzLmdldCh0cmFja0lkKVxuICAgIGlmICh0cmFjaykge1xuICAgICAgdHJhY2sudm9sdW1lID0gdm9sdW1lXG4gICAgICB0cmFjay5jaGFubmVsLnZvbHVtZS52YWx1ZSA9IHZvbHVtZVxuICAgIH1cbiAgfVxuXG4gIHNldFRyYWNrTXV0ZSh0cmFja0lkOiBzdHJpbmcsIG11dGVkOiBib29sZWFuKSB7XG4gICAgY29uc3QgdHJhY2sgPSB0aGlzLnRyYWNrcy5nZXQodHJhY2tJZClcbiAgICBpZiAodHJhY2spIHtcbiAgICAgIHRyYWNrLm11dGVkID0gbXV0ZWRcbiAgICAgIHRyYWNrLmNoYW5uZWwubXV0ZSA9IG11dGVkXG4gICAgfVxuICB9XG5cbiAgc2V0VHJhY2tTb2xvKHRyYWNrSWQ6IHN0cmluZywgc29sbzogYm9vbGVhbikge1xuICAgIGNvbnN0IHRyYWNrID0gdGhpcy50cmFja3MuZ2V0KHRyYWNrSWQpXG4gICAgaWYgKHRyYWNrKSB7XG4gICAgICB0cmFjay5zb2xvID0gc29sb1xuICAgICAgLy8gSW1wbGVtZW50IHNvbG8gbG9naWMgLSBtdXRlIG90aGVyIHRyYWNrcyB3aGVuIG9uZSBpcyBzb2xvZWRcbiAgICAgIGNvbnN0IGhhc1NvbG9UcmFja3MgPSBBcnJheS5mcm9tKHRoaXMudHJhY2tzLnZhbHVlcygpKS5zb21lKHQgPT4gdC5zb2xvKVxuICAgICAgXG4gICAgICB0aGlzLnRyYWNrcy5mb3JFYWNoKHQgPT4ge1xuICAgICAgICBpZiAoaGFzU29sb1RyYWNrcykge1xuICAgICAgICAgIHQuY2hhbm5lbC5tdXRlID0gIXQuc29sb1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHQuY2hhbm5lbC5tdXRlID0gdC5tdXRlZFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8vIEF1ZGlvIExvYWRpbmdcbiAgYXN5bmMgbG9hZEF1ZGlvVG9UcmFjayh0cmFja0lkOiBzdHJpbmcsIGF1ZGlvVXJsOiBzdHJpbmcpIHtcbiAgICBjb25zdCB0cmFjayA9IHRoaXMudHJhY2tzLmdldCh0cmFja0lkKVxuICAgIGlmICh0cmFjayAmJiB0cmFjay5pbnN0cnVtZW50IGluc3RhbmNlb2YgUGxheWVyKSB7XG4gICAgICBhd2FpdCB0cmFjay5pbnN0cnVtZW50LmxvYWQoYXVkaW9VcmwpXG4gICAgfVxuICB9XG5cbiAgLy8gTUlESSBQbGF5YmFja1xuICBwbGF5Tm90ZSh0cmFja0lkOiBzdHJpbmcsIG5vdGU6IHN0cmluZywgZHVyYXRpb246IHN0cmluZyA9ICc4bicsIHRpbWU/OiBudW1iZXIpIHtcbiAgICBjb25zdCB0cmFjayA9IHRoaXMudHJhY2tzLmdldCh0cmFja0lkKVxuICAgIGlmICh0cmFjayAmJiB0cmFjay5pbnN0cnVtZW50KSB7XG4gICAgICBpZiAodHJhY2suaW5zdHJ1bWVudCBpbnN0YW5jZW9mIFBvbHlTeW50aCkge1xuICAgICAgICB0cmFjay5pbnN0cnVtZW50LnRyaWdnZXJBdHRhY2tSZWxlYXNlKG5vdGUsIGR1cmF0aW9uLCB0aW1lKVxuICAgICAgfSBlbHNlIGlmICh0cmFjay5pbnN0cnVtZW50IGluc3RhbmNlb2YgTWVtYnJhbmVTeW50aCkge1xuICAgICAgICB0cmFjay5pbnN0cnVtZW50LnRyaWdnZXJBdHRhY2tSZWxlYXNlKG5vdGUsIGR1cmF0aW9uLCB0aW1lKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEVmZmVjdHNcbiAgYWRkRWZmZWN0KHRyYWNrSWQ6IHN0cmluZywgZWZmZWN0VHlwZTogJ3JldmVyYicgfCAnZGVsYXknIHwgJ2Rpc3RvcnRpb24nIHwgJ2ZpbHRlcicpIHtcbiAgICBjb25zdCB0cmFjayA9IHRoaXMudHJhY2tzLmdldCh0cmFja0lkKVxuICAgIGlmICghdHJhY2spIHJldHVyblxuXG4gICAgbGV0IGVmZmVjdDogRWZmZWN0XG5cbiAgICBzd2l0Y2ggKGVmZmVjdFR5cGUpIHtcbiAgICAgIGNhc2UgJ3JldmVyYic6XG4gICAgICAgIGVmZmVjdCA9IG5ldyBSZXZlcmIoMilcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2RlbGF5JzpcbiAgICAgICAgZWZmZWN0ID0gbmV3IEZlZWRiYWNrRGVsYXkoJzhuJywgMC4zKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnZGlzdG9ydGlvbic6XG4gICAgICAgIGVmZmVjdCA9IG5ldyBEaXN0b3J0aW9uKDAuOClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2ZpbHRlcic6XG4gICAgICAgIGVmZmVjdCA9IG5ldyBGaWx0ZXIoMTAwMCwgJ2xvd3Bhc3MnKVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gSW5zZXJ0IGVmZmVjdCBiZWZvcmUgdGhlIGNoYW5uZWxcbiAgICB0cmFjay5pbnN0cnVtZW50Py5kaXNjb25uZWN0KClcbiAgICB0cmFjay5pbnN0cnVtZW50Py5jaGFpbihlZmZlY3QsIHRyYWNrLmNoYW5uZWwpXG4gICAgdHJhY2suZWZmZWN0cy5wdXNoKGVmZmVjdClcbiAgfVxuXG4gIC8vIFRyYW5zcG9ydCBDb250cm9sXG4gIHNldEJQTShicG06IG51bWJlcikge1xuICAgIGlmICh0aGlzLmluaXRpYWxpemVkICYmIFRyYW5zcG9ydCkge1xuICAgICAgVHJhbnNwb3J0LmJwbS52YWx1ZSA9IGJwbVxuICAgIH1cbiAgfVxuXG4gIGdldEJQTSgpOiBudW1iZXIge1xuICAgIGlmICh0aGlzLmluaXRpYWxpemVkICYmIFRyYW5zcG9ydCkge1xuICAgICAgcmV0dXJuIFRyYW5zcG9ydC5icG0udmFsdWVcbiAgICB9XG4gICAgcmV0dXJuIDEyMFxuICB9XG5cbiAgZ2V0UG9zaXRpb24oKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5pbml0aWFsaXplZCAmJiBUcmFuc3BvcnQpIHtcbiAgICAgIHJldHVybiBUcmFuc3BvcnQucG9zaXRpb24udG9TdHJpbmcoKVxuICAgIH1cbiAgICByZXR1cm4gJzA6MDowJ1xuICB9XG5cbiAgc2V0UG9zaXRpb24ocG9zaXRpb246IHN0cmluZykge1xuICAgIGlmICh0aGlzLmluaXRpYWxpemVkICYmIFRyYW5zcG9ydCkge1xuICAgICAgVHJhbnNwb3J0LnBvc2l0aW9uID0gcG9zaXRpb25cbiAgICB9XG4gIH1cblxuICAvLyBMb29wIENvbnRyb2xcbiAgc2V0TG9vcChzdGFydDogc3RyaW5nLCBlbmQ6IHN0cmluZykge1xuICAgIGlmICh0aGlzLmluaXRpYWxpemVkICYmIFRyYW5zcG9ydCkge1xuICAgICAgVHJhbnNwb3J0LnNldExvb3BQb2ludHMoc3RhcnQsIGVuZClcbiAgICAgIFRyYW5zcG9ydC5sb29wID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGRpc2FibGVMb29wKCkge1xuICAgIGlmICh0aGlzLmluaXRpYWxpemVkICYmIFRyYW5zcG9ydCkge1xuICAgICAgVHJhbnNwb3J0Lmxvb3AgPSBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIC8vIE1ldHJvbm9tZVxuICB0b2dnbGVNZXRyb25vbWUoZW5hYmxlZDogYm9vbGVhbikge1xuICAgIGlmICghdGhpcy5tZXRyb25vbWUgfHwgIXRoaXMuaW5pdGlhbGl6ZWQgfHwgIVRyYW5zcG9ydCkgcmV0dXJuXG5cbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgLy8gU2NoZWR1bGUgbWV0cm9ub21lIGNsaWNrcyBvbiBldmVyeSBiZWF0XG4gICAgICBUcmFuc3BvcnQuc2NoZWR1bGVSZXBlYXQoKHRpbWUpID0+IHtcbiAgICAgICAgdGhpcy5tZXRyb25vbWU/LnN0YXJ0KHRpbWUpXG4gICAgICB9LCAnNG4nKVxuICAgIH0gZWxzZSB7XG4gICAgICBUcmFuc3BvcnQuY2FuY2VsKClcbiAgICB9XG4gIH1cblxuICAvLyBTdGF0ZVxuICBnZXRTdGF0ZSgpOiBBdWRpb0VuZ2luZVN0YXRlIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNQbGF5aW5nOiB0aGlzLmluaXRpYWxpemVkICYmIFRyYW5zcG9ydD8uc3RhdGUgPT09ICdzdGFydGVkJyxcbiAgICAgIGlzUmVjb3JkaW5nOiB0aGlzLnJlY29yZGVyPy5zdGF0ZSA9PT0gJ3N0YXJ0ZWQnIHx8IGZhbHNlLFxuICAgICAgYnBtOiB0aGlzLmluaXRpYWxpemVkID8gdGhpcy5nZXRCUE0oKSA6IDEyMCxcbiAgICAgIHBvc2l0aW9uOiB0aGlzLmluaXRpYWxpemVkID8gdGhpcy5nZXRQb3NpdGlvbigpIDogJzA6MDowJyxcbiAgICAgIHRyYWNrczogdGhpcy5nZXRBbGxUcmFja3MoKVxuICAgIH1cbiAgfVxuXG4gIC8vIENsZWFudXBcbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLnRyYWNrcy5mb3JFYWNoKHRyYWNrID0+IHtcbiAgICAgIHRyYWNrLmluc3RydW1lbnQ/LmRpc3Bvc2UoKVxuICAgICAgdHJhY2suY2hhbm5lbC5kaXNwb3NlKClcbiAgICAgIHRyYWNrLmVmZmVjdHMuZm9yRWFjaChlZmZlY3QgPT4gZWZmZWN0LmRpc3Bvc2UoKSlcbiAgICB9KVxuICAgIHRoaXMudHJhY2tzLmNsZWFyKClcbiAgICB0aGlzLnJlY29yZGVyPy5kaXNwb3NlKClcbiAgICB0aGlzLm1ldHJvbm9tZT8uZGlzcG9zZSgpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXVkaW9FbmdpbmUiXSwibmFtZXMiOlsiQXVkaW9FbmdpbmUiLCJnZXRJbnN0YW5jZSIsImluc3RhbmNlIiwiaW5pdGlhbGl6ZSIsImluaXRpYWxpemVkIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwicGxheSIsImlzQ3VycmVudGx5UGxheWluZyIsInBhdXNlIiwic3RvcCIsImN1cnJlbnRQb3NpdGlvbiIsInN0YXJ0UmVjb3JkaW5nIiwiaXNDdXJyZW50bHlSZWNvcmRpbmciLCJzdG9wUmVjb3JkaW5nIiwiY3JlYXRlVHJhY2siLCJuYW1lIiwidHlwZSIsImlkIiwiTWF0aCIsIkRhdGUiLCJub3ciLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0ciIsInRyYWNrIiwidm9sdW1lIiwibXV0ZWQiLCJzb2xvIiwiaW5zdHJ1bWVudCIsImVmZmVjdHMiLCJjaGFubmVsIiwidHJhY2tzIiwic2V0IiwiZ2V0VHJhY2siLCJnZXQiLCJnZXRBbGxUcmFja3MiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJkZWxldGVUcmFjayIsImRpc3Bvc2UiLCJmb3JFYWNoIiwiZWZmZWN0IiwiZGVsZXRlIiwic2V0VHJhY2tWb2x1bWUiLCJ0cmFja0lkIiwidmFsdWUiLCJzZXRUcmFja011dGUiLCJtdXRlIiwic2V0VHJhY2tTb2xvIiwiaGFzU29sb1RyYWNrcyIsInNvbWUiLCJ0IiwibG9hZEF1ZGlvVG9UcmFjayIsImF1ZGlvVXJsIiwiUGxheWVyIiwibG9hZCIsInBsYXlOb3RlIiwibm90ZSIsImR1cmF0aW9uIiwidGltZSIsIlBvbHlTeW50aCIsInRyaWdnZXJBdHRhY2tSZWxlYXNlIiwiTWVtYnJhbmVTeW50aCIsImFkZEVmZmVjdCIsImVmZmVjdFR5cGUiLCJSZXZlcmIiLCJGZWVkYmFja0RlbGF5IiwiRGlzdG9ydGlvbiIsIkZpbHRlciIsImRpc2Nvbm5lY3QiLCJjaGFpbiIsInB1c2giLCJzZXRCUE0iLCJicG0iLCJUcmFuc3BvcnQiLCJnZXRCUE0iLCJnZXRQb3NpdGlvbiIsInBvc2l0aW9uIiwic2V0UG9zaXRpb24iLCJzZXRMb29wIiwic3RhcnQiLCJlbmQiLCJzZXRMb29wUG9pbnRzIiwibG9vcCIsImRpc2FibGVMb29wIiwidG9nZ2xlTWV0cm9ub21lIiwiZW5hYmxlZCIsIm1ldHJvbm9tZSIsInNjaGVkdWxlUmVwZWF0IiwiY2FuY2VsIiwiZ2V0U3RhdGUiLCJpc1BsYXlpbmciLCJzdGF0ZSIsImlzUmVjb3JkaW5nIiwicmVjb3JkZXIiLCJjbGVhciIsImNvbnN0cnVjdG9yIiwiTWFwIiwibWFpbk91dCIsImN1cnJlbnRCUE0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/audio/AudioEngine.ts\n"));

/***/ })

});