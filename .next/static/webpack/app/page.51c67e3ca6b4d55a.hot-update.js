"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/audio/AudioEngine.ts":
/*!**********************************!*\
  !*** ./lib/audio/AudioEngine.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var tone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tone */ \"(app-pages-browser)/./node_modules/tone/build/Tone.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nclass AudioEngine {\n    static getInstance() {\n        if (!AudioEngine.instance) {\n            AudioEngine.instance = new AudioEngine();\n        }\n        return AudioEngine.instance;\n    }\n    async initialize() {\n        if (this.initialized) return;\n        try {\n            await (0,tone__WEBPACK_IMPORTED_MODULE_0__.start)();\n            console.log(\"Audio context started\");\n            // Set initial BPM\n            tone__WEBPACK_IMPORTED_MODULE_0__.Transport.bpm.value = 120;\n            // Create metronome\n            this.metronome = new tone__WEBPACK_IMPORTED_MODULE_0__.Player({\n                url: \"data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhCEdNegA\",\n                loop: false\n            }).toDestination();\n            this.initialized = true;\n        } catch (error) {\n            console.error(\"Failed to initialize audio:\", error);\n        }\n    }\n    // Transport Controls\n    async play() {\n        await this.initialize();\n        if (Tone.Transport) {\n            Tone.Transport.start();\n        }\n        return true;\n    }\n    pause() {\n        if (this.initialized && Tone.Transport) {\n            Tone.Transport.pause();\n        }\n    }\n    stop() {\n        if (this.initialized && Tone.Transport) {\n            Tone.Transport.stop();\n            Tone.Transport.position = 0;\n        }\n    }\n    async startRecording() {\n        await this.initialize();\n        if (!this.recorder) {\n            this.recorder = new Tone.Recorder();\n            this.mainOut.connect(this.recorder);\n        }\n        this.recorder.start();\n        this.play();\n    }\n    async stopRecording() {\n        if (!this.recorder) return null;\n        const recording = await this.recorder.stop();\n        this.stop();\n        return recording;\n    }\n    // Track Management\n    createTrack(name) {\n        let type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"audio\";\n        const id = \"track_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n        let instrument;\n        switch(type){\n            case \"midi\":\n                instrument = new Tone.PolySynth(Tone.Synth);\n                break;\n            case \"drum\":\n                instrument = new Tone.MembraneSynth();\n                break;\n            default:\n                instrument = new Tone.Player().toDestination();\n        }\n        const channel = new Tone.Channel().toDestination();\n        instrument.connect(channel);\n        const track = {\n            id,\n            name,\n            volume: 0,\n            muted: false,\n            solo: false,\n            instrument,\n            effects: [],\n            channel\n        };\n        this.tracks.set(id, track);\n        return id;\n    }\n    getTrack(id) {\n        return this.tracks.get(id);\n    }\n    getAllTracks() {\n        return Array.from(this.tracks.values());\n    }\n    deleteTrack(id) {\n        const track = this.tracks.get(id);\n        if (track) {\n            var _track_instrument;\n            (_track_instrument = track.instrument) === null || _track_instrument === void 0 ? void 0 : _track_instrument.dispose();\n            track.channel.dispose();\n            track.effects.forEach((effect)=>effect.dispose());\n            this.tracks.delete(id);\n        }\n    }\n    // Track Controls\n    setTrackVolume(trackId, volume) {\n        const track = this.tracks.get(trackId);\n        if (track) {\n            track.volume = volume;\n            track.channel.volume.value = volume;\n        }\n    }\n    setTrackMute(trackId, muted) {\n        const track = this.tracks.get(trackId);\n        if (track) {\n            track.muted = muted;\n            track.channel.mute = muted;\n        }\n    }\n    setTrackSolo(trackId, solo) {\n        const track = this.tracks.get(trackId);\n        if (track) {\n            track.solo = solo;\n            // Implement solo logic - mute other tracks when one is soloed\n            const hasSoloTracks = Array.from(this.tracks.values()).some((t)=>t.solo);\n            this.tracks.forEach((t)=>{\n                if (hasSoloTracks) {\n                    t.channel.mute = !t.solo;\n                } else {\n                    t.channel.mute = t.muted;\n                }\n            });\n        }\n    }\n    // Audio Loading\n    async loadAudioToTrack(trackId, audioUrl) {\n        const track = this.tracks.get(trackId);\n        if (track && track.instrument instanceof Tone.Player) {\n            await track.instrument.load(audioUrl);\n        }\n    }\n    // MIDI Playback\n    playNote(trackId, note) {\n        let duration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"8n\", time = arguments.length > 3 ? arguments[3] : void 0;\n        const track = this.tracks.get(trackId);\n        if (track && track.instrument) {\n            if (track.instrument instanceof Tone.PolySynth) {\n                track.instrument.triggerAttackRelease(note, duration, time);\n            } else if (track.instrument instanceof Tone.MembraneSynth) {\n                track.instrument.triggerAttackRelease(note, duration, time);\n            }\n        }\n    }\n    // Effects\n    addEffect(trackId, effectType) {\n        var // Insert effect before the channel\n        _track_instrument, _track_instrument1;\n        const track = this.tracks.get(trackId);\n        if (!track) return;\n        let effect;\n        switch(effectType){\n            case \"reverb\":\n                effect = new Tone.Reverb(2);\n                break;\n            case \"delay\":\n                effect = new Tone.FeedbackDelay(\"8n\", 0.3);\n                break;\n            case \"distortion\":\n                effect = new Tone.Distortion(0.8);\n                break;\n            case \"filter\":\n                effect = new Tone.Filter(1000, \"lowpass\");\n                break;\n            default:\n                return;\n        }\n        (_track_instrument = track.instrument) === null || _track_instrument === void 0 ? void 0 : _track_instrument.disconnect();\n        (_track_instrument1 = track.instrument) === null || _track_instrument1 === void 0 ? void 0 : _track_instrument1.chain(effect, track.channel);\n        track.effects.push(effect);\n    }\n    // Transport Control\n    setBPM(bpm) {\n        if (this.initialized && Tone.Transport) {\n            Tone.Transport.bpm.value = bpm;\n        }\n    }\n    getBPM() {\n        if (this.initialized && Tone.Transport) {\n            return Tone.Transport.bpm.value;\n        }\n        return 120;\n    }\n    getPosition() {\n        if (this.initialized && Tone.Transport) {\n            return Tone.Transport.position.toString();\n        }\n        return \"0:0:0\";\n    }\n    setPosition(position) {\n        if (this.initialized && Tone.Transport) {\n            Tone.Transport.position = position;\n        }\n    }\n    // Loop Control\n    setLoop(start, end) {\n        if (this.initialized && Tone.Transport) {\n            Tone.Transport.setLoopPoints(start, end);\n            Tone.Transport.loop = true;\n        }\n    }\n    disableLoop() {\n        if (this.initialized && Tone.Transport) {\n            Tone.Transport.loop = false;\n        }\n    }\n    // Metronome\n    toggleMetronome(enabled) {\n        if (!this.metronome || !this.initialized || !Tone.Transport) return;\n        if (enabled) {\n            // Schedule metronome clicks on every beat\n            Tone.Transport.scheduleRepeat((time)=>{\n                var _this_metronome;\n                (_this_metronome = this.metronome) === null || _this_metronome === void 0 ? void 0 : _this_metronome.start(time);\n            }, \"4n\");\n        } else {\n            Tone.Transport.cancel();\n        }\n    }\n    // State\n    getState() {\n        var _Tone_Transport, _this_recorder;\n        return {\n            isPlaying: this.initialized && ((_Tone_Transport = Tone.Transport) === null || _Tone_Transport === void 0 ? void 0 : _Tone_Transport.state) === \"started\",\n            isRecording: ((_this_recorder = this.recorder) === null || _this_recorder === void 0 ? void 0 : _this_recorder.state) === \"started\" || false,\n            bpm: this.initialized ? this.getBPM() : 120,\n            position: this.initialized ? this.getPosition() : \"0:0:0\",\n            tracks: this.getAllTracks()\n        };\n    }\n    // Cleanup\n    dispose() {\n        var _this_recorder, _this_metronome;\n        this.tracks.forEach((track)=>{\n            var _track_instrument;\n            (_track_instrument = track.instrument) === null || _track_instrument === void 0 ? void 0 : _track_instrument.dispose();\n            track.channel.dispose();\n            track.effects.forEach((effect)=>effect.dispose());\n        });\n        this.tracks.clear();\n        (_this_recorder = this.recorder) === null || _this_recorder === void 0 ? void 0 : _this_recorder.dispose();\n        (_this_metronome = this.metronome) === null || _this_metronome === void 0 ? void 0 : _this_metronome.dispose();\n    }\n    constructor(){\n        this.initialized = false;\n        this.tracks = new Map();\n        this.recorder = null;\n        this.metronome = null;\n        this.mainOut = tone__WEBPACK_IMPORTED_MODULE_0__.Destination;\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (AudioEngine);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/audio/AudioEngine.ts\n"));

/***/ })

});